"""
Pixel-by-pixel linear rate (velocity) estimation using iterative weighted
least-squares method.

Based on the Matlab Pirate 'stack.m' and Matlab 'lscov.m' functions.

.. codeauthor: Matt Garthwaite, Sudipta Basak
"""

from scipy.linalg import solve, cholesky, qr, inv
from numpy import nan, isnan, sqrt, diag, delete, ones, array, nonzero, float32
import numpy as np
import parmap
import itertools
from pyrate import config as cf


def is_pos_def(x):
    """
    Can be used to check if matrix x is +ve def.
    Works on the basis that all eigenvalues should be +ve
    :param x:
    :return:
    """
    if x.shape[0] == x.shape[1]:
        return np.all(np.linalg.eigvals(x) > 1e-6)
    else:
        return False


def linear_rate(ifgs, params, vcmt, mst=None):
    """
    Pixel-by-pixel linear rate (velocity) estimation using iterative weighted least-squares method.

    :param ifgs: Sequence of ifg objs from which to extract observations
    :param params: configuration parameters
    :param vcmt: Derived positive definite temporal variance covariance matrix  
    :param mst: Pixel-wise matrix describing the minimum spanning tree network
    :param parallel: use multiprocessing or not.
    :param processes: number of parallel processes to use

    :return:
        python/matlab variable names
        rate/ifg_stack: stacked interferogram (i.e., rate map)
        error/std_stack: standard deviation of the stacked interferogram
                  (i.e., error map)
        samples/coh_sta: statistics of coherent pixels used for stacking
        demerror:  dem errors in metres, not implemented in python
    """
    MAXSIG, NSIG, PTHRESH, cols, error, mst, obs, parallel, processes, \
    rate, rows, samples, span = linrate_setup(ifgs, mst, params)

    # pixel-by-pixel calculation.
    # nested loops to loop over the 2 image dimensions
    if parallel == 1:
        res = parmap.map(linear_rate_by_rows, range(rows), cols, mst, NSIG, obs,
                         PTHRESH, span, vcmt, processes=processes)
        res = np.array(res)
        rate = res[:, :, 0]
        error = res[:, :, 1]
        samples = res[:, :, 2]
    elif parallel == 2:
        res = parmap.starmap(linear_rate_by_pixel,
                             itertools.product(range(rows), range(cols)), mst,
                             NSIG, obs, PTHRESH, span, vcmt,
                             processes=processes)
        res = np.array(res)

        rate = res[:, 0].reshape(rows, cols)
        error = res[:, 1].reshape(rows, cols)
        samples = res[:, 2].reshape(rows, cols)
    else:
        for i in xrange(rows):
            for j in xrange(cols):
                rate[i, j], error[i, j], samples[i, j] = \
                    linear_rate_by_pixel(i, j, mst, NSIG, obs,
                                         PTHRESH, span, vcmt)

    # overwrite the data whose error is larger than the
    # maximum sigma user threshold
    mask = ~isnan(error)
    mask[mask] &= error[mask] > MAXSIG
    rate[mask] = nan
    error[mask] = nan
    # samples[mask] = nan  # TODO: Confirm this step is missing in matlab?

    return rate, error, samples


def linrate_setup(ifgs, mst, params):
    # MULTIPROCESSING parameters
    parallel = params[cf.PARALLEL]
    processes = params[cf.PROCESSES]
    # linrate parameters from config file
    NSIG = params[cf.LR_NSIG]  # n-sigma ratio used to threshold 'model minus observation' residuals
    MAXSIG = params[cf.LR_MAXSIG]  # Threshold for maximum allowable standard error
    PTHRESH = params[cf.LR_PTHRESH]  # Pixel threshold; minimum number of coherent observations for a pixel
    rows, cols = ifgs[0].phase_data.shape
    # make 3D block of observations
    obs = array([np.where(isnan(x.phase_data), 0, x.phase_data) for x in ifgs])
    span = array([[x.time_span for x in ifgs]])
    # Update MST in case additional NaNs generated by APS filtering
    if mst is None:  # dummy mst if none is passed in
        mst = ~isnan(obs)
    else:
        mst[isnan(obs)] = 0

    # preallocate empty arrays. No need to preallocation NaNs with new code
    error = np.empty([rows, cols], dtype=float32)
    rate = np.empty([rows, cols], dtype=float32)
    samples = np.empty([rows, cols], dtype=np.float32)
    return MAXSIG, NSIG, PTHRESH, cols, error, mst, obs, parallel, processes, \
           rate, rows, samples, span


def linear_rate_by_rows(row, cols, mst, NSIG, obs, PTHRESH, span, vcmt):
    """
    helper function for parallel 'row' runs
    :param row:
    :param cols:
    :param mst:
    :param NSIG:
    :param obs:
    :param PTHRESH:
    :param span: span calculated in linarate function
    :param vcmt: temporal vcm matrix
    :return:
    """
    res = np.empty(shape=(cols, 3), dtype=np.float32)
    for col in xrange(cols):
        res[col, :] = linear_rate_by_pixel(
            row, col, mst, NSIG, obs, PTHRESH, span, vcmt)

    return res


def linear_rate_by_pixel(row, col, mst, NSIG, obs, PTHRESH, span, vcmt):
    # find the indices of independent ifgs for given pixel from MST
    ind = np.nonzero(mst[:, row, col])[0]  # only True's in mst are chosen
    # iterative loop to calculate 'robust' velocity for pixel
    default_no_samples = len(ind)

    while len(ind) >= PTHRESH:
        # make vector of selected ifg observations
        ifgv = obs[ind, row, col]

        # form design matrix from appropriate ifg time spans
        B = span[:, ind]

        # Subset of full VCM matrix for selected observations
        vcm_temp = vcmt[ind, np.vstack(ind)]

        ###start matlab lscov routine

        # Get the lower triangle cholesky decomposition.
        # V must be positive definite (symmetrical and square)
        T = cholesky(vcm_temp, 1)

        # Incorporate inverse of VCM into the design matrix and observations vector
        A = solve(T, B.transpose())
        b = solve(T, ifgv.transpose())

        # Factor the design matrix, incorporate covariances or weights into the
        # system of equations, and transform the response vector.
        Q, R, _ = qr(A, mode='economic', pivoting=True)
        z = Q.conj().transpose().dot(b)

        # Compute the Lstsq coefficient for the velocity
        v = solve(R, z)

        ###end matlab lscov routine

        # Compute the model errors
        err1 = inv(vcm_temp).dot(B.conj().transpose())
        err2 = B.dot(err1)
        err = sqrt(diag(inv(err2)))

        # Compute the residuals (model minus observations)
        r = (B * v) - ifgv

        # determine the ratio of residuals and apriori variances
        w = cholesky(inv(vcm_temp))
        wr = abs(np.dot(w, r.transpose()))

        # test if maximum ratio is greater than user threshold.
        max_val = wr.max()
        if max_val > NSIG:
            # if yes, discard and re-do the calculation.
            ind = delete(ind, wr.argmax())
        else:
            # if no, save estimate, exit the while loop and go to next pixel
            return v[0], err[0], ifgv.shape[0]
    # dummy return for no change
    return np.nan, np.nan, default_no_samples
